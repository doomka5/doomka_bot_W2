"""Telegram bot with basic user management backed by PostgreSQL."""

from __future__ import annotations

import asyncio
import logging
import os
import shlex
from typing import Any, Awaitable, Callable, Dict, Optional

import asyncpg
from aiogram import BaseMiddleware, Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.filters.command import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    TelegramObject,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is not set")

DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_NAME = os.getenv("DB_NAME", "botdb")
DB_USER = os.getenv("DB_USER", "botuser")
DB_PASS = os.getenv("DB_PASS", "botpass")

db_pool: Optional[asyncpg.Pool] = None


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def user_has_access(tg_id: int) -> bool:
    if db_pool is None:
        logging.warning("Database pool is not initialised when checking access")
        return False
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT 1 FROM users WHERE tg_id = $1", tg_id)
    return row is not None


async def user_is_admin(tg_id: int) -> bool:
    if db_pool is None:
        logging.warning("Database pool is not initialised when checking admin role")
        return False
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT role FROM users WHERE tg_id = $1", tg_id)
    if not row:
        return False
    role = (row["role"] or "").lower()
    return "–∞–¥–º–∏–Ω–∏—Å—Ç" in role or "admin" in role


async def ensure_admin_access(message: Message, state: Optional[FSMContext] = None) -> bool:
    if not message.from_user:
        return False
    if await user_is_admin(message.from_user.id):
        return True
    if state is not None:
        await state.clear()
    await message.answer("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.", reply_markup=MAIN_MENU_KB)
    return False


# === –ú–∏–¥–ª–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–∞ ===
class AccessControlMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        user_id: Optional[int] = None
        if isinstance(event, Message) and event.from_user:
            user_id = event.from_user.id
        if user_id is None:
            return await handler(event, data)
        if await user_has_access(user_id):
            return await handler(event, data)
        if isinstance(event, Message):
            await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return None


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_database() -> None:
    global db_pool
    db_pool = await asyncpg.create_pool(
        host=DB_HOST, port=DB_PORT, user=DB_USER, password=DB_PASS, database=DB_NAME
    )

    async with db_pool.acquire() as conn:
        async with conn.transaction():
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    tg_id BIGINT UNIQUE NOT NULL,
                    username TEXT NOT NULL,
                    position TEXT NOT NULL,
                    role TEXT NOT NULL,
                    created_at TIMESTAMPTZ DEFAULT timezone('utc', now())
                )
                """
            )
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS warehouse_plastics (
                    id SERIAL PRIMARY KEY,
                    article TEXT NOT NULL,
                    material TEXT,
                    thickness NUMERIC(10, 2),
                    color TEXT,
                    length NUMERIC(10, 2),
                    width NUMERIC(10, 2),
                    warehouse TEXT,
                    comment TEXT,
                    employee_id BIGINT,
                    employee_name TEXT,
                    arrival_date DATE
                )
                """
            )
            await conn.execute(
                """
                INSERT INTO users (tg_id, username, position, role)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (tg_id) DO UPDATE
                SET username = EXCLUDED.username,
                    position = EXCLUDED.position,
                    role = EXCLUDED.role
                """,
                37352491,
                "DooMka",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º",
            )


async def close_database() -> None:
    global db_pool
    if db_pool:
        await db_pool.close()
        db_pool = None


# === –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup(bot: Bot) -> None:
    await init_database()
    logging.info("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    print("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")


async def on_shutdown(bot: Bot) -> None:
    await close_database()


# === Dispatcher ===
dp = Dispatcher()
dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)
dp.message.outer_middleware(AccessControlMiddleware())


# === FSM ===
class AddUserStates(StatesGroup):
    waiting_for_tg_id = State()
    waiting_for_username = State()
    waiting_for_position = State()
    waiting_for_role = State()


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
MAIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="–¢–µ—Å—Ç")],
        [KeyboardButton(text="üè¢ –°–∫–ª–∞–¥")],
    ],
    resize_keyboard=True,
)

SETTINGS_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

USERS_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True,
)

WAREHOUSE_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß± –ü–ª–∞—Å—Ç–∏–∫–∏")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

WAREHOUSE_SETTINGS_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß± –ü–ª–∞—Å—Ç–∏–∫")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥—É")],
    ],
    resize_keyboard=True,
)

WAREHOUSE_PLASTICS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å")],
        [KeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="üîÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥—É")],
    ],
    resize_keyboard=True,
)


# === –†–∞–±–æ—Ç–∞ —Å –ë–î ===
async def upsert_user_in_db(tg_id: int, username: str, position: str, role: str) -> None:
    if db_pool is None:
        raise RuntimeError("Database pool is not initialised")
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (tg_id, username, position, role)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (tg_id) DO UPDATE
            SET username = EXCLUDED.username,
                position = EXCLUDED.position,
                role = EXCLUDED.role
            """,
            tg_id, username, position, role,
        )


# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(CommandStart())
async def handle_start(message: Message) -> None:
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KB)


@dp.message(F.text == "–¢–µ—Å—Ç")
async def handle_test(message: Message) -> None:
    await message.answer("—Ç–µ—Å—Ç –æ–∫")


@dp.message(Command("settings"))
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=SETTINGS_MENU_KB)


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞")
async def handle_warehouse_settings(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=WAREHOUSE_SETTINGS_MENU_KB
    )


@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def handle_users_menu(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=USERS_MENU_KB)


@dp.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main(message: Message) -> None:
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_MENU_KB)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_back_to_settings(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    await handle_settings(message)


# === –°–∫–ª–∞–¥ ===
@dp.message(F.text == "üè¢ –°–∫–ª–∞–¥")
async def handle_warehouse_menu(message: Message) -> None:
    await message.answer("üè¢ –°–∫–ª–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=WAREHOUSE_MENU_KB)


@dp.message(F.text == "üß± –ü–ª–∞—Å—Ç–∏–∫–∏")
async def handle_warehouse_plastics(message: Message) -> None:
    await message.answer("üì¶ –†–∞–∑–¥–µ–ª ¬´–ü–ª–∞—Å—Ç–∏–∫–∏¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "üß± –ü–ª–∞—Å—Ç–∏–∫")
async def handle_warehouse_settings_plastic(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞ ‚Üí –ü–ª–∞—Å—Ç–∏–∫: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=WAREHOUSE_SETTINGS_MENU_KB,
    )


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def handle_plastics_add(message: Message) -> None:
    await message.answer("‚ûï –î–æ–±–∞–≤–∏—Ç—å: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "‚ûñ –°–ø–∏—Å–∞—Ç—å")
async def handle_plastics_write_off(message: Message) -> None:
    await message.answer("‚ûñ –°–ø–∏—Å–∞—Ç—å: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def handle_plastics_comment(message: Message) -> None:
    await message.answer("üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "üîÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")
async def handle_plastics_move(message: Message) -> None:
    await message.answer("üîÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "üîç –ù–∞–π—Ç–∏")
async def handle_plastics_search(message: Message) -> None:
    await message.answer("üîç –ù–∞–π—Ç–∏: –æ–ø—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=WAREHOUSE_PLASTICS_KB)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥—É")
async def handle_plastics_back(message: Message) -> None:
    await message.answer("üè¢ –°–∫–ª–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=WAREHOUSE_MENU_KB)


# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_add_user_button(message: Message, state: FSMContext) -> None:
    if not await ensure_admin_access(message, state):
        return
    await state.set_state(AddUserStates.waiting_for_tg_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).", reply_markup=ReplyKeyboardRemove())


@dp.message(AddUserStates.waiting_for_tg_id)
async def process_tg_id(message: Message, state: FSMContext) -> None:
    if not await ensure_admin_access(message, state):
        return
    try:
        tg_id = int(message.text)
    except (TypeError, ValueError):
        await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(tg_id=tg_id)
    await state.set_state(AddUserStates.waiting_for_username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username).")


@dp.message(AddUserStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext) -> None:
    if not await ensure_admin_access(message, state):
        return
    username = (message.text or "").strip()
    if not username:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    await state.update_data(username=username)
    await state.set_state(AddUserStates.waiting_for_position)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@dp.message(AddUserStates.waiting_for_position)
async def process_position(message: Message, state: FSMContext) -> None:
    if not await ensure_admin_access(message, state):
        return
    position = (message.text or "").strip()
    if not position:
        await message.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    await state.update_data(position=position)
    await state.set_state(AddUserStates.waiting_for_role)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@dp.message(AddUserStates.waiting_for_role)
async def process_role(message: Message, state: FSMContext) -> None:
    if not await ensure_admin_access(message, state):
        return
    role = (message.text or "").strip()
    if not role:
        await message.answer("–†–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    data = await state.get_data()
    await state.clear()
    try:
        await upsert_user_in_db(data["tg_id"], data["username"], data["position"], role)
    except RuntimeError:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=SETTINGS_MENU_KB)
        return
    await message.answer(
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ ID: {data['tg_id']}\n"
        f"‚Ä¢ –ò–º—è: {data['username']}\n"
        f"‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
        f"‚Ä¢ –†–æ–ª—å: {role}",
        reply_markup=USERS_MENU_KB,
    )


@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_list_users(message: Message) -> None:
    if not await ensure_admin_access(message):
        return
    try:
        async with db_pool.acquire() as conn:
            rows = await conn.fetch("SELECT tg_id, username, position, role FROM users ORDER BY id DESC")
    except Exception:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=USERS_MENU_KB)
        return
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=USERS_MENU_KB)
        return
    lines = [
        f"‚Ä¢ ID: {r['tg_id']}\n  –ò–º—è: {r['username']}\n  –î–æ–ª–∂–Ω–æ—Å—Ç—å: {r['position']}\n  –†–æ–ª—å: {r['role']}"
        for r in rows
    ]
    await message.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n\n".join(lines), reply_markup=USERS_MENU_KB)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
