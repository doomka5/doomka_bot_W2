"""Telegram bot with basic user management backed by PostgreSQL."""

import asyncio
import logging
import os
import shlex
from typing import Optional

import asyncpg
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.filters.command import CommandObject
from aiogram.types import Message

logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is not set")

DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = int(os.getenv("DB_PORT", "5432"))
DB_NAME = os.getenv("DB_NAME", "botdb")
DB_USER = os.getenv("DB_USER", "botuser")
DB_PASS = os.getenv("DB_PASS", "botpass")

db_pool: Optional[asyncpg.Pool] = None


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_database() -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    global db_pool
    db_pool = await asyncpg.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASS,
        database=DB_NAME,
    )

    async with db_pool.acquire() as conn:
        async with conn.transaction():
            await conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    tg_id BIGINT UNIQUE NOT NULL,
                    username TEXT NOT NULL,
                    position TEXT NOT NULL,
                    role TEXT NOT NULL,
                    created_at TIMESTAMPTZ DEFAULT timezone('utc', now())
                )
                """
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await conn.execute(
                """
                INSERT INTO users (tg_id, username, position, role)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (tg_id) DO UPDATE
                SET username = EXCLUDED.username,
                    position = EXCLUDED.position,
                    role = EXCLUDED.role
                """,
                37352491,           # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                "DooMka",           # –ò–º—è
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",    # –î–æ–ª–∂–Ω–æ—Å—Ç—å
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º",  # –†–æ–ª—å
            )


async def close_database() -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î."""
    global db_pool
    if db_pool is not None:
        await db_pool.close()
        db_pool = None


# === –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup(bot: Bot) -> None:
    await init_database()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")


async def on_shutdown(bot: Bot) -> None:
    await close_database()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
dp = Dispatcher()
dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)


@dp.message(CommandStart())
async def handle_start(message: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adduser.")


@dp.message(Command("adduser"))
async def handle_add_user(message: Message, command: CommandObject) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    if not command.args:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <tg_id> <username> <position> <role>\n"
            "–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–±–µ–ª—ã ‚Äî –∑–∞–∫–ª—é—á–∞–π—Ç–µ –∏—Ö –≤ –∫–∞–≤—ã—á–∫–∏."
        )
        return

    try:
        parts = shlex.split(command.args)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return

    if len(parts) < 4:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        return

    tg_id_str, username, position, *role_parts = parts
    try:
        tg_id = int(tg_id_str)
    except ValueError:
        await message.answer("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    role = " ".join(role_parts)
    if not role:
        await message.answer("–†–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    if db_pool is None:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (tg_id, username, position, role)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (tg_id) DO UPDATE
            SET username = EXCLUDED.username,
                position = EXCLUDED.position,
                role = EXCLUDED.role
            """,
            tg_id, username, position, role,
        )

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ ID: {tg_id}\n"
        f"‚Ä¢ –ò–º—è: {username}\n"
        f"‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"‚Ä¢ –†–æ–ª—å: {role}"
    )


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
